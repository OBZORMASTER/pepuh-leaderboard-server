from flask import Flask, request, jsonify
from flask_cors import CORS
import db
import os

app = Flask(__name__)
CORS(app)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
with app.app_context():
    db.init_db()
    print("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

@app.route("/")
def home():
    print("üìû –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
    return jsonify({
        "message": "Pepuh Leaderboard Server", 
        "status": "running",
        "version": "1.0"
    })

@app.route("/api/health")
def health():
    print("üìû –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å health check")
    return jsonify({"status": "healthy", "database": "SQLite"})

@app.route("/api/register", methods=["POST"])
def register():
    try:
        print("üìû –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        data = request.get_json()
        if not data:
            return jsonify({"error": "No JSON data provided"}), 400
        
        name = data.get("name")
        if not name:
            return jsonify({"error": "Name is required"}), 400
        
        db.add_player(name)
        print(f"‚úÖ –ò–≥—Ä–æ–∫ {name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        return jsonify({"message": f"Player '{name}' registered successfully!"})
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return jsonify({"error": str(e)}), 500

@app.route("/api/update_score", methods=["POST"])
def update_score():
    try:
        print("üìû –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞")
        data = request.get_json()
        if not data:
            return jsonify({"error": "No JSON data provided"}), 400
        
        name = data.get("name")
        score = data.get("score")
        
        if not name or score is None:
            return jsonify({"error": "Name and score are required"}), 400
        
        success = db.update_score(name, score)
        
        if success:
            print(f"‚úÖ –°—á–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {name}: {score}")
            return jsonify({
                "message": f"Score updated for {name}",
                "score": score,
                "status": "success"
            })
        else:
            print(f"‚ö†Ô∏è –°—á–µ—Ç –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {name} (—Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç –≤—ã—à–µ)")
            return jsonify({
                "message": f"Score not updated for {name} (current score is higher)",
                "score": score,
                "status": "not_updated"
            })
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}")
        return jsonify({"error": str(e)}), 500

@app.route("/api/leaderboard", methods=["GET"])
def leaderboard():
    try:
        print("üìû –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞")
        limit = request.args.get('limit', 10, type=int)
        leaders = db.get_leaderboard(limit)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è Godot
        formatted_leaders = [[player[0], player[1]] for player in leaders]
        
        print(f"‚úÖ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {len(leaders)} –∏–≥—Ä–æ–∫–æ–≤")
        return jsonify({
            "leaders": formatted_leaders,
            "count": len(leaders),
            "status": "success"
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞: {e}")
        return jsonify({"error": str(e)}), 500

@app.route("/api/player/<name>", methods=["GET"])
def get_player(name):
    try:
        print(f"üìû –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ: {name}")
        player = db.get_player_stats(name)
        
        if player:
            print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ {name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            return jsonify({
                "name": player[0],
                "best_score": player[1],
                "created_at": player[2],
                "updated_at": player[3],
                "status": "found"
            })
        else:
            print(f"‚ö†Ô∏è –ò–≥—Ä–æ–∫ {name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return jsonify({"error": "Player not found"}), 404
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ: {e}")
        return jsonify({"error": str(e)}), 500

@app.route("/api/test")
def test():
    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω!")
    return jsonify({
        "status": "success", 
        "message": "Server is working!",
        "database": "SQLite"
    })

if __name__ == "__main__":
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Render)
    port = int(os.environ.get("PORT", 5000))
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É
    db.init_db()
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(
        host="0.0.0.0", 
        port=port, 
        debug=False,  # –ù–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ debug=False
        threaded=True
    )